import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.time.Instant

plugins {
    id('maven-publish')
    id('idea')
    id('eclipse')
    alias(libs.plugins.spotless) apply(false)
}

defaultTasks('build')

subprojects {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'eclipse')
    apply(plugin: libs.plugins.spotless.get().pluginId)

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()

        // NeuralNexus
        maven {
            name = "NeuralNexus"
            url = "https://maven.neuralnexus.dev/releases"
        }

        // NeuralNexus
        maven {
            name = "NeuralNexus Snapshots"
            url = "https://maven.neuralnexus.dev/snapshots"
        }

        // NeuralNexus Mirror
        maven {
            name = 'NeuralNexus Mirror'
            url = 'https://maven.neuralnexus.dev/mirror'
        }

        // Local Libs
        flatDir {
            dirs("${rootProject.projectDir}/libs")
        }
    }

    dependencies {
        compileOnly('org.jetbrains:annotations:24.1.0')
    }

    spotless {
        format 'misc', {
            target '*.gradle', '.gitattributes', '.gitignore'

            trimTrailingWhitespace()
            leadingTabsToSpaces()
            endWithNewline()
        }
        java {
            toggleOffOn()
            importOrder()
            removeUnusedImports()
            cleanthat()
            googleJavaFormat('1.24.0').aosp().formatJavadoc(true).reorderImports(true)
            formatAnnotations()
            licenseHeader """/**
 * Copyright (c) 2025 Dylan Sperrer - dylan@sperrer.ca
 * The project is Licensed under <a href="https://github.com/p0t4t0sandwich/TaterLib/blob/dev/LICENSE">MIT</a>
 */
"""
        }
    }

    tasks.build.dependsOn(spotlessApply)
    tasks.findByName('shadowJar')?.dependsOn(spotlessApply)
    tasks.findByName('remapShadowJar')?.dependsOn(spotlessApply)
}

// --------------------------- Merge mixin configs --------------------------------
ext.mergeMixinConfigs = { List<File> mixinConfigs ->
    File merged = file('./build/tmp/taterlib.mixins.json')
    def mixinConfigJson = [:]
    mixinConfigJson.put("compatibilityLevel", "JAVA_8")
    mixinConfigJson.put("minVersion", "0.8")
    def injectors = [:]
    injectors.put("defaultRequire", 1)
    mixinConfigJson.put("injectors", injectors)
    mixinConfigJson.put("required", false)
    mixinConfigJson.put("plugin", "dev.neuralnexus.taterlib.mixin.plugin.TaterLibMixinPlugin")
    mixinConfigJson.put("package", "dev.neuralnexus.taterlib.mixin")
    mixinConfigJson.put("mixins", [])
    mixinConfigJson.put("client", [])
    mixinConfigJson.put("server", [])

    JsonSlurper json = new JsonSlurper()
    def mixins = []
    def client = []
    def server = []
    mixinConfigs.each { mixinConfig ->
        def mixinConfigJsonFile = json.parse(mixinConfig)
        if (mixinConfigJsonFile.get("mixins") != null) {
            mixins += mixinConfigJsonFile.get("mixins")
        }
        if (mixinConfigJsonFile.get("client") != null) {
            client += mixinConfigJsonFile.get("client")
        }
        if (mixinConfigJsonFile.get("server") != null) {
            server += mixinConfigJsonFile.get("server")
        }
    }
    mixins.sort { a, b -> a.compareTo(b) }
    client.sort { a, b -> a.compareTo(b) }
    server.sort { a, b -> a.compareTo(b) }
    mixinConfigJson.put("mixins", mixins)
    mixinConfigJson.put("client", client)
    mixinConfigJson.put("server", server)
    merged.text = JsonOutput.prettyPrint(JsonOutput.toJson(mixinConfigJson))
    return fileTree(merged)
}

// --------------------------- Jar file helper method --------------------------------
ext.bundleJars = { Map<String, List<String>> platformVersions ->
    def jarFiles = [
            file("./common/build/libs/${mod_id}-common-${version}-full.jar"),
            file("./versions/v1_6_4/build/libs/${mod_id}-1.6.4-${version}.jar"),
            file("./versions/v1_7_10/build/libs/${mod_id}-1.7.10-${version}.jar"),
            file("./versions/v1_8_9/build/libs/${mod_id}-1.8.9-${version}.jar"),
            file("./versions/v1_9_4/build/libs/${mod_id}-1.9.4-${version}.jar"),
            file("./versions/v1_10_2/build/libs/${mod_id}-1.10.2-${version}.jar"),
            file("./versions/v1_11_2/build/libs/${mod_id}-1.11.2-${version}.jar"),
            file("./versions/v1_12_2/build/libs/${mod_id}-1.12.2-${version}.jar"),
            file("./versions/modern-utils/build/libs/${mod_id}-modern-utils-${version}.jar"),
            file("./versions/v1_13_2/build/libs/${mod_id}-1.13.2-${version}.jar"),
            file("./versions/v1_14_4/build/libs/${mod_id}-1.14.4-${version}.jar"),
            file("./versions/v1_15_2/build/libs/${mod_id}-1.15.2-${version}.jar"),
            file("./versions/v1_16_1/build/libs/${mod_id}-1.16.1-${version}.jar"),
            file("./versions/v1_16_5/build/libs/${mod_id}-1.16.5-${version}.jar"),
            file("./versions/v1_17_1/build/libs/${mod_id}-1.17.1-${version}.jar"),
            file("./versions/v1_18_2/build/libs/${mod_id}-1.18.2-${version}.jar"),
            file("./versions/v1_19/build/libs/${mod_id}-1.19-${version}.jar"),
            file("./versions/v1_19_4/build/libs/${mod_id}-1.19.4-${version}.jar"),
            file("./versions/v1_20_1/build/libs/${mod_id}-1.20.1-${version}.jar"),
            file("./versions/v1_20_2/build/libs/${mod_id}-1.20.2-${version}.jar"),
            file("./versions/v1_20_4/build/libs/${mod_id}-1.20.4-${version}.jar"),
            file("./versions/v1_20_6/build/libs/${mod_id}-1.20.6-${version}.jar"),
            file("./versions/v1_21_1/build/libs/${mod_id}-1.21.1-${version}.jar"),
            file("./versions/v1_21_3/build/libs/${mod_id}-1.21.3-${version}.jar"),
            file("./versions/v1_21_4/build/libs/${mod_id}-1.21.4-${version}.jar")
    ]
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            jarFiles.add(file("${platform}/${platform}-${mcVersion}/build/libs/${mod_id}-${platform}-${mcVersion}-${version}.jar") as File)
        }
    }
    def zipped = jarFiles.collect {
        zipTree(it).matching {
            exclude('taterlib.mixins.*')
        }
    }
    def mixinConfigs = []
    jarFiles.collect {
        zipTree(it).files.each { file ->
            if (file.name.startsWith("taterlib.mixins.")) {
                mixinConfigs.add(file)
            }
        }
    }
    zipped.add(mergeMixinConfigs(mixinConfigs))
    return zipped
}

var platformVersions = [:]
platformVersions.put("bukkit", Arrays.asList(
        "utils", "b1.7.3", "1.2.5", "1.6.4", "1.7.10", "1.8.8", "1.13.2", "1.15.2", "1.20"))
platformVersions.put("bungee", Arrays.asList("utils", "1.4.7", "1.8", "1.12", "1.20"))
platformVersions.put("velocity", Arrays.asList("3"))

// --------------------------- Fun Helper Task --------------------------------
tasks.register("buildAllTheStuffNowBcGradleIsDumb", Task) {
    dependsOn(":api:build")
    dependsOn(":common:build")
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }
}

// --------------------------- Build MonoJar --------------------------------
tasks.register('build_monojar', Jar) {
    dependsOn(':api:build')
    dependsOn(':common:shadowJar')
    dependsOn(':loader:build')
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    String mc_version = 'b1.7.3-1.21.4'
    archiveFileName = "${mod_id}-${version}.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': "${mod_name} ${mc_version}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': Instant.now().toString(),
                'FMLCorePluginContainsFMLMod': 'true',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'MixinConfigs': "taterlib.mixins.json,crossperms.mixins.json"
    }

    from(["README.md", "LICENSE"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}
